openapi: 3.0.1
info:
  version: 1.0.0
  title: pÂ·d programming.dev API
  description: |-
    API for our programming.dev app.


     
     Some useful links:
     - [Nuestro GitHub](https://github.com/ASW-Proj/Entrega2/tree/main)
     - [Nuestro proyecto en Taiga](https://tree.taiga.io/project/mcampsll-asw-project/backlog)
servers:
  - url: http://127.0.0.1:3000
paths:
  /up:
    get:
      summary: check API Health
      responses:
        '200':
          description: Application is up
        '500':
          description: Application is down or encountering an error
  /communities:
    get:
      tags:
        - communities
      summary: get all communities
      description: Returns a list of all communities existing in the DB
      operationId: getAllCommunities
      responses:
        '200':
          description: Returns a list of communities
          content:
            application/json:
              schema:
                type: object
                properties:
                  communities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Community'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Communities not found
    post:
      tags:
        - communities
      summary: create a new community
      description: Creates a new community according to the given parameters.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '201':
          description: Community created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
  /communities/{id}:
    get:
      tags:
        - communities
      summary: show a community
      description: Check a list of the given community's posts.
      parameters:
        - name: id
          in: path
          description: Identifier of the community we want to edit
          required: true
          schema:
            type: integer
        - name: user_id
          in: query
          description: If this is present, returns only those communities for which the user is subscribed. 
          required: false 
          schema: 
            type: integer
      responses:
        '200':
          description: Information of the community
          content:
            application/json:
              schema:
                type: object
                properties:
                  communities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found
    delete:
      tags:
        - communities
      summary: delete a community
      description: >-
        If the logged user has permission, deletes the community with the given
        id.
      parameters:
        - name: id
          in: path
          description: Identifier of the community we want to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Community deleted succesfully
        '202':
          description: Action has been accepted and queued
        '400':
          description: Bad request
      security:
        - bearerAuth: []
    put:
      tags:
        - communities
      summary: edit a community
      description: Edit certain values of a community
      parameters:
        - name: id
          in: path
          description: Identifier of the community we want to edit
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Community'
      responses:
        '200':
          description: Community edited successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found
      security:
        - bearerAuth: []
  /posts:
    post:
      tags:
        - posts
      summary: create a new post
      description: >-
        As a logged user, create a new post giving the parameters indicated
        below
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    get:
      tags:
        - posts
      summary: returns a list of posts
      description: Gets the list of all existing posts. Can be sorted several ways
      parameters:
        - name: order
          in: query
          description: Selects the order in which posts will be displayed
          required: true
          schema:
            type: string
            default: recent
            enum:
              - recent
              - oldest
              - mostcommented
              - likes
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found

  

          
  /posts/{id}:
    get:
      tags:
        - posts
      summary: show a post
      description: Return the information of the post with the given id
      parameters:
        - name: id
          in: path
          description: Identifier of the post we want to see
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Information of the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  communities:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found

    delete:
      tags:
        - posts
      summary: delete a post
      description: If the logged user has permission, deletes the community with the given
        id.
      parameters:
        - name: id
          in: path
          description: Identifier of the post we want to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: post deleted succesfully
        '202':
          description: Action has been accepted and queued
        '400':
          description: Bad request
      security:
        - bearerAuth: []
    put:
      tags:
        - posts
      summary: edit a post
      description: Replace a post's old info with the given one
      parameters:
        - name: id
          in: path
          description: Identifier of the post we want to see
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post edited sucessfully. 
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found
          
      security:
        - bearerAuth: []
      
  /users:
    get:
      tags:
        - users
      summary: get all users
      description: Returns a list with the details of all users in our system. 
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found

    post:
      tags:
        - users
      summary: create a new user
      description: Creates a new user with the parameters given. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /users/{id}:
    get:
      tags:
        - users
      summary: show a user 
      description: View the profile of a certain user
      parameters:
        - name: id
          in: path
          description: Identifier of the user we want to check
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Returns the information of the corresponding user
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found

    delete: 
      tags: 
        - users
      summary: delete a user
      description: If authorized, delete the user with the given id
      parameters: 
        - name: id
          in: path
          description: Identifier of the user we want to delete
          required: true
          schema:
            type: integer
      responses:
        '200': 
          description: user deleted sucessfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found
      security:
        - bearerAuth: []
         
    put:
      tags:
        - users
      summary: edit a user
      description: Replace a user's old info with the given one
      parameters:
        - name: id
          in: path
          description: Identifier of the user we want to see
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User edited sucessfully. 
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found   
      security:
        - bearerAuth: []
  
  
  
  /comments:
    post:
      tags:
        - comments
      summary: create a new comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    get:
      tags:
        - comments
      summary: view a list of comments
      description: Returns all the parameters of all comments, according to an order.
      parameters:
        - name: order
          in: query
          description: Selects the order in which posts will be displayed
          required: true
          schema:
            type: string
            default: recent
            enum:
              - recent
              - oldest
              - mostcommented
              - likes
      responses:
        '200':
          description: List of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'

  
  /comments/{id}: 
    get: 
      tags:
        - comments
      summary: show a comment
      description: Get the information of a comment
      parameters:
        - name: id
          in: path
          description: Identifier of the comment we want to show
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Returns the information of the requested comment
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Users not found

    delete:
      tags:
        - comments
      summary: delete a comment
      description: >-
        If the logged user has permission, deletes the comment with the given
        id.
      parameters:
        - name: id
          in: path
          description: Identifier of the comment we want to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comment deleted succesfully
        '202':
          description: Action has been accepted and queued
        '400':
          description: Bad request
      security:
        - bearerAuth: []
    put:
      tags:
        - comments
      summary: edit a single comment
      description: >-
        If the logged user has permission, edits the parameters of a comment
        with given id.
      parameters:
        - name: id
          in: path
          description: Identifier of the comment we want to edit
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment edited succesfully
        '400':
          description: Bad request
      security:
        - bearerAuth: []
  /community/{community_id}/subscribe/{user_id}:
    post:
      tags:
        - communities
      summary: subscribe a user to a certain community
      description: >-
        Establishes a subscription link between a certain user and a certain
        community.
      parameters:
        - name: community_id
          in: path
          description: Identifier of the community
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Subscribed succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    delete:
      tags:
        - communities
      summary: unsubscribe a user to a certain community
      description: >-
        Removes the subscription link between a certain user and a certain
        community.
      parameters:
        - name: community_id
          in: path
          description: Identifier of the community
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user subscribed to community_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Unsubscribed succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
  /posts/{post_id}/save/{user_id}:
    post:
      tags:
        - posts
      summary: save a post
      description: Establishes a saved link between a certain user and a certain post.
      parameters:
        - name: post_id
          in: path
          description: Identifier of the community
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Saved succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    delete:
      tags:
        - posts
      summary: un-saves a post
      description: Removes a post from the user's saved list.
      parameters:
        - name: post_id
          in: path
          description: Identifier of the post
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Removed save succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
  /comment/{comment_id}/save/{user_id}:
    post:
      tags:
        - comments
      summary: save a comment
      description: Establishes a saved link between a certain user and a certain comment.
      parameters:
        - name: comment_id
          in: path
          description: Identifier of the comment
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Saved succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    delete:
      tags:
        - comments
      summary: un-saves a comment
      description: Removes a comment from the user's saved list.
      parameters:
        - name: comment_id
          in: path
          description: Identifier of the post
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Removed save succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
  /post/{post_id}/like/{user_id}:
    post:
      tags:
        - posts
      summary: like or dislike a post
      description: >-
        The user adds the corresponding rating to the post. 
      parameters:
        - name: post_id
          in: path
          description: Identifier of the post
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
        - name: positive
          in: query
          description: True if vote is positive, false otherwise. 
          schema:
            type: boolean
      responses:
        '201':
          description: Rating added succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    delete:
      tags:
        - posts
      summary: un-like or un-dislike a post
      description: >-
        The user removes the rating previously given to a post. 
      parameters:
        - name: post_id
          in: path
          description: Identifier of the post
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Removed rating succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
  /comment/{comment_id}/like/{user_id}:
    post:
      tags:
        - comments
      summary: adds rating to a post
      description: Adds a like or dislike to the comment with id=comment_id, by the user user_id. 
      parameters:
        - name: comment_id
          in: path
          description: Identifier of the comment
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
        - name: positive
          in: query
          description: True if vote is positive, false otherwise. 
          schema:
            type: boolean
      responses:
        '201':
          description: Saved rating succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
    delete:
      tags:
        - comments
      summary: remove rating to a post
      description: Removes the like or dislike issued by the user with user_id in the post with id=post_id 
      parameters:
        - name: comment_id
          in: path
          description: Identifier of the post
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: Identifier of the user
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Removed rating succesfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      security:
        - bearerAuth: []
        
        
        
components:
  schemas:
    ActiveStorageAttachment:
      type: object
      required:
        - name
        - record_type
        - record_id
        - blob_id
        - created_at
      properties:
        id:
          type: integer
        name:
          type: string
        record_type:
          type: string
        record_id:
          type: integer
        blob_id:
          type: integer
        created_at:
          type: string
          format: date-time
    ActiveStorageBlob:
      type: object
      required:
        - key
        - filename
        - service_name
        - byte_size
        - created_at
      properties:
        id:
          type: integer
        key:
          type: string
        filename:
          type: string
        content_type:
          type: string
        metadata:
          type: object
        service_name:
          type: string
        byte_size:
          type: integer
        checksum:
          type: string
        created_at:
          type: string
          format: date-time
    ActiveStorageVariantRecord:
      type: object
      required:
        - blob_id
        - variation_digest
      properties:
        id:
          type: integer
        blob_id:
          type: integer
        variation_digest:
          type: string
    CommentLike:
      type: object
      required:
        - user_id
        - comment_id
        - positive
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        user_id:
          type: integer
        comment_id:
          type: integer
        positive:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Comment:
      type: object
      required:
        - body
        - created_at
        - updated_at
        - user_id
        - community_id
        - post_id
      properties:
        id:
          type: integer
        body:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user_id:
          type: integer
        community_id:
          type: integer
        post_id:
          type: integer
        parent_id:
          type: integer
    Community:
      type: object
      required:
        - identifier
        - name
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        identifier:
          type: string
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    User:
      type: object
      required:
        - id
        - username
        - email
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        username:
          type: string
        bio:
          type: string
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    PostLike:
      type: object
      required:
        - user_id
        - post_id
        - positive
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        user_id:
          type: integer
        post_id:
          type: integer
        positive:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Post:
      type: object
      required:
        - title
        - created_at
        - updated_at
        - user_id
        - community_id
      properties:
        id:
          type: integer
        title:
          type: string
        url:
          type: string
        body:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user_id:
          type: integer
        community_id:
          type: integer
    SavedComment:
      type: object
      required:
        - user_id
        - comment_id
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        user_id:
          type: integer
        comment_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    SavedPost:
      type: object
      required:
        - user_id
        - post_id
        - created_at
        - updated_at
      properties:
        id:
          type: integer
        user_id:
          type: integer
        post_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
